import math
import numpy as np

#using mathematical functions finding orientation 
def orientation(p1, p2, p3):
    x1, y1, x2, y2, x3, y3 = *p1, *p2, *p3
    d = (y3-y2)*(x2-x1) - (y2-y1)*(x3-x2)
    #return 1 if they are counterclockwise
    if d > 0:
        return 1
    #returns -1 if they are clockwise
    elif d < 0:
        return -1
   #returns 0 if they are collinear
    else:
        return 0
      
#computes the distance between the current point on the hull and the potential next point
#the farthest one is chosen
def dist(p1, p2):
  #using unpacking operator
  #the values x1 and y1 are assigned the first two values in p1
  #the values x2 and y2 are assigned the first two values in p2
  #equivalent to x1 = p1[0]
  #y1 = p1[1]
  #x2 = p2[0]
  #y2 = p2[1]
  x1, y1, x2, y2 = *p1, *p2
  return math.sqrt((y2-y1)**2 + (x2-x1)**2)
  
#takes 2D points as parameter
#returns a list of points of convex hull
def gift_wrapping(points):
  #to find the leftmost point  i.e., minimum x and minimum y coordinate
    on_hull = min(points, key=lambda p: (p[0], p[1]))      #using the min function on the lambda key 
    hull = []
    while True:
        hull.append(on_hull)
        next_point = points[0]
        #iterate through the remaining points and finds the point with the smallest angle to the previous point on the hull 
        for point in points:
            o = orientation(on_hull, next_point, point)
            if np.array_equal(next_point, on_hull) or o == 1 or (o == 0 and dist(on_hull, point) > dist(on_hull, next_point)):
                next_point = point
        on_hull = next_point
        if np.array_equal(on_hull,hull[0]):    #the loop terminates when it reaches the starting point 
            break
    return hull


#generates a random data set of 1000 points with x and y coordinates between -1000 and 1000
points = np.random.uniform(low=-1000, high=1000, size=(1000, 2))

hull = gift_wrapping(points)
for point in hull:
  print(point)
