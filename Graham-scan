import math
import numpy

#using mathematical functions finding orientation 
def orientation(p1, p2, p3):
    x1, y1, x2, y2, x3, y3 = *p1, *p2, *p3
    d = (y3-y2)*(x2-x1) - (y2-y1)*(x3-x2)
    #return 1 if they are counterclockwise
    if d > 0:
        return 1
    #returns -1 if they are clockwise
    elif d < 0:
        return -1
   #returns 0 if they are collinear
    else:
        return 0
def dist(p1, p2):
  #using unpacking operator
  #the values x1 and y1 are assigned the first two values in p1
  #the values x2 and y2 are assigned the first two values in p2
  #equivalent to x1 = p1[0]
  #y1 = p1[1]
  #x2 = p2[0]
  #y2 = p2[1]
  x1, y1, x2, y2 = *p1, *p2
  return math.sqrt((y2-y1)**2 + (x2-x1)**2)
  
def polar_angle(p1, p2):
    if p1[1] == p2[1]:           #used math formulas for this
        return -math.pi
    dy = p1[1]-p2[1]
    dx = p1[0]-p2[0]
    return math.atan2(dy, dx)      #inverse of tan is used to find the polar angle

def graham(points):
    #finds the point with the minimum y coordinate
    p0 = min(points, key=lambda p: (p[1], p[0]))
    #sorts the remaining points with respect to the polar angles wrt the chosen point
    points= sorted(points,key= lambda p: (polar_angle(p0, p), dist(p0, p)))
    hull = []
    #using a stack to keep track of the points on the hull
    for i in range(len(points)):
       #for each point it checks whether the last two points on the stack and the current point make a left turn
        while len(hull) >= 2 and orientation(hull[-2], hull[-1], points[i]) != 1:
          #if not it keeps popping the last element from the stack until a left turn is formed
            hull.pop()
        #append the current point on the stack
        hull.append(points[i])
    return hull

#generates a random data set of 1000 points with x and y coordinates between -1000 and 1000
points = np.random.uniform(low=-1000, high=1000, size=(1000, 2))

hull = graham(points)
for point in hull:
  print(point)
